design_task:
  description: >
    Create a high-level Game Design Document (GDD) for the specified topic: {topic}. The document must include:
      - Core game mechanics, gameplay objectives, win/loss conditions, and level progression.
      - User interactions (e.g., keys/buttons to play) and user experience (UX) guidelines.
      - Scoring systems, detailed game layouts, and any special gameplay instructions.
    The design must be structured, clear, and developer-friendly to enable seamless implementation by other agents. It should include:
      - The Python module name: {module_name}.
      - The primary class name: {class_name}.
    These details ensure compatibility with backend development and project integration requirements.
  expected_output: >
    A structured markdown (.md) file containing the complete GDD, specifying:
      - Classes, methods, and functionalities required for the game module.
      - Detailed gameplay elements and design notes for developers.
  agent: game_designer
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Develop a Python module using the latest version of 'pygame' library, following the Game Designer's specifications in the Game Design Document (GDD). The module must:
      - Align with the described core game mechanics, gameplay features, handle game over logic and user interaction requirements.
      - Contain a single, self-contained Python class named {class_name}, as specified in the GDD.
      - Demonstrate clean, modular, and reusable code that adheres to Python best practices.
      - IMPORTANT: Output ONLY valid Python code (no markdown, no backticks, or formatting).
      - Operate efficiently and be fully testable, ready for integration with the overall game system, including the UI.
      - Cover all edge cases and verify the code once completed with GDD
  expected_output: >
    A Python (.py) file containing the complete backend code implementing the required functionality for the game.
  agent: game_developer
  context:
    - design_task
  output_file: output/{module_name}.py

frontend_task:
  description: >
    Develop a latest-version Gradio-based frontend UI that integrates with the {module_name}.py backend module.
    The frontend should dynamically import {module_name}.py to avoid code duplication across modules.
    Ensure the UI provides an interactive and functional connection to the backend gameplay mechanics without repeating logic from the backend module.

    The UI requirements include:
      - A "Start Game" button: This button launches the game in a separate Pygame window when clicked.
      - Gameplay instructions section: Clearly display how to play the game, including:
          - Details about the controls (e.g., keys or buttons required for interaction).
          - Description of gameplay objectives.
      - Seamless integration with the backend module {module_name}, leveraging its state and methods.
      - User-friendly and visually appealing design to enhance player interaction with the game.
      - verify the code after completion with latest versions of the modules

  expected_output: >
    A Python (.py) file that serves as the Gradio frontend application for the game. The file must:
      - Dynamically import the backend module {module_name}.py instead of repeating shared game code or logic.
      - Render a responsive UI that allows users to interact with the game logic, control gameplay elements, and visualize dynamic outputs.
      - Include clean, modular, and up-to-date Gradio code to ensure compatibility with the latest Gradio UI conventions.
      - Ensure proper handling of thread-based backend interactions where required (e.g., multiple game launches).

    IMPORTANT: Provide ONLY valid Python code as the output, without any markdown, backticks, or additional formatting. The submission must be a ready-to-execute Python file, with no extra explanations embedded.

  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py